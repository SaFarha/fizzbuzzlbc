// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "fizzbuzzlbc/database/models"

	mock "github.com/stretchr/testify/mock"
)

// FzParamRequestRepository is an autogenerated mock type for the FzParamRequestRepository type
type FzParamRequestRepository struct {
	mock.Mock
}

// CreateParamRequest provides a mock function with given fields: _a0
func (_m *FzParamRequestRepository) CreateParamRequest(_a0 models.FzParamRequest) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateParamRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.FzParamRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetParamRequestByUid provides a mock function with given fields: uid
func (_m *FzParamRequestRepository) GetParamRequestByUid(uid string) (*models.FzParamRequest, error) {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for GetParamRequestByUid")
	}

	var r0 *models.FzParamRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.FzParamRequest, error)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(string) *models.FzParamRequest); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FzParamRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFzParamRequestRepository creates a new instance of FzParamRequestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFzParamRequestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FzParamRequestRepository {
	mock := &FzParamRequestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
